rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user owns the resource
    function isOwner(resource) {
      return request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         resource.data.metadata.createdBy == request.auth.uid);
    }
    
    // Helper function to validate input data
    function isValidRoomData(data) {
      return data.keys().hasAll(['roomName', 'createdBy', 'createdAt', 'status']) &&
        data.roomName is string && data.roomName.size() >= 3 && data.roomName.size() <= 50 &&
        data.createdBy is string && data.createdBy.size() > 0 &&
        data.createdAt is timestamp &&
        data.status in ['active', 'completed', 'cancelled'];
    }
    
    // Helper function to validate call data
    function isValidCallData(data) {
      return data.keys().hasAll(['roomName', 'createdBy', 'createdAt', 'status']) &&
        data.roomName is string && data.roomName.size() >= 3 && data.roomName.size() <= 50 &&
        data.createdBy is string && data.createdBy.size() > 0 &&
        data.createdAt is timestamp &&
        data.status in ['active', 'completed', 'cancelled'];
    }
    
    // Rooms collection - users can only access their own rooms
    match /rooms/{roomId} {
      allow read, write: if request.auth != null && isOwner(resource);
      allow create: if request.auth != null && 
        isValidRoomData(request.resource.data) &&
        request.resource.data.createdBy == request.auth.uid;
    }
    
    // Calls collection - users can only access their own calls
    match /calls/{callId} {
      allow read, write: if request.auth != null && isOwner(resource);
      allow create: if request.auth != null && 
        isValidCallData(request.resource.data) &&
        request.resource.data.createdBy == request.auth.uid;
    }
    
    // Consultations collection - users can only access their own consultations
    match /consultations/{consultationId} {
      allow read, write: if request.auth != null && isOwner(resource);
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
    }
    
    // Call summaries - read-only for users, write-only for server
    match /call-summaries/{summaryId} {
      allow read: if request.auth != null && isOwner(resource);
      // Only allow writes from server-side (admin SDK) - no client writes
      allow write: if false;
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Audit logs - read-only for users, write-only for server
    match /audit-logs/{logId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.auth.token.admin == true);
      allow write: if false; // Only server-side writes
    }
    
    // Sessions - users can only access their own sessions
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Scheduled deletions - users can only access their own scheduled deletions
    match /scheduled-deletions/{deletionId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Invitations collection - users can only access their own invitations
    match /invitations/{invitationId} {
      allow read, write: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
    }
  }
}
